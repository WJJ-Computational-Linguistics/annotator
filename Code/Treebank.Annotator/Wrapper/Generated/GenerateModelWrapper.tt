<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="$(SolutionDir)\Code\Treebank.Domain\bin\Debug\Treebank.Domain.dll" #>
<#@ import namespace="System.Runtime.CompilerServices"#>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Treebank.Domain" #>
<#@ output extension=".cs" #>
<#
	var excludedGenericClasses = new List<string>{"Element"};
	var excludedNonGenericClasses = new List<string>{"Attribute"};
	foreach(var modelType in GetModelTypes())
	{
		var simpleProperties = modelType.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly).Where(p => p.PropertyType.IsValueType || p.PropertyType == typeof(string)).ToList();
		var complexProperties = modelType.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly).Except(simpleProperties).Where(p => p.PropertyType.IsClass && !typeof(IEnumerable).IsAssignableFrom(p.PropertyType) && !p.Name.Equals("DynamicContent")).ToList();
		var collectionProperties = modelType.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly).Except(simpleProperties).Except(complexProperties).Where(p => p.PropertyType.IsGenericType).ToList();
#>
namespace Treebank.Annotator.Wrapper
{
	using System;
	using System.Linq;
	using Base;
	using Treebank.Domain;

<#
		if(!excludedGenericClasses.Contains(modelType.Name) && !excludedNonGenericClasses.Contains(modelType.Name))
		{
#>
	public partial class <#=modelType.Name#>Wrapper : ElementWrapper<Domain.<#=modelType.Name#>>
	{
		public <#=modelType.Name#>Wrapper(Domain.<#=modelType.Name#> model) : base(model)
		{
		}
<#
		}
		else if(excludedGenericClasses.Contains(modelType.Name))
		{
#>
	public partial class <#=modelType.Name#>Wrapper<T> : ModelWrapper<T>
	where T : Domain.<#=modelType.Name#>
	{
		public <#=modelType.Name#>Wrapper(T model) : base(model)
		{
        }
<#
		}else if(excludedNonGenericClasses.Contains(modelType.Name))
		{
#>
	public partial class <#=modelType.Name#>Wrapper : ModelWrapper<Domain.<#=modelType.Name#>>
	{
		public <#=modelType.Name#>Wrapper(Domain.<#=modelType.Name#> model) : base(model)
		{
        }
<#		}#>
<#
		GenerateSimpleProperties(simpleProperties);
		GenerateComplexProperties(complexProperties);
		GenerateCollectionProperties(collectionProperties);
		GenerateInitializeComplexProperties(modelType.Name, complexProperties);
		GenerateInitializeCollectionProperties(excludedGenericClasses, modelType.Name, collectionProperties);
#>
	}
}
<#
		SaveGeneratedCodeAsFile(modelType.Name+"Wrapper.g.cs");
	}
#>
<#+ 
	private IEnumerable<Type> GetModelTypes(){
		return typeof(Element).Assembly.GetTypes().Where(t => System.Attribute.GetCustomAttribute(t, typeof(CompilerGeneratedAttribute)) == null);
	} 

	private void SaveGeneratedCodeAsFile(string filename)
    {
		string dir = Path.GetDirectoryName(Host.TemplateFile);

		string outputFilePath = Path.Combine(dir, filename);
		File.WriteAllText(outputFilePath, GenerationEnvironment.ToString());

		GenerationEnvironment.Clear();

    }

	private void GenerateSimpleProperties(IEnumerable<PropertyInfo> properties)
    {
		foreach(var property in properties)
        {
			var propertyType = GetTypeName(property.PropertyType);
			var propertyName = property.Name;
#>

		public <#=propertyType#> <#= propertyName#>
        {
            get { return GetValue<<#=propertyType#>>(); }
            set { SetValue(value); }
        }

        public <#=propertyType#> <#= propertyName#>OriginalValue
        {
            get { return GetOriginalValue<<#=propertyType#>>("<#= propertyName#>"); }
        }

        public bool <#= propertyName#>IsChanged
        {
            get { return GetIsChanged("<#= propertyName#>"); }
        }
<#+
        }
    }
#>
<#+
	private void GenerateComplexProperties(IEnumerable<PropertyInfo> properties)
    {
		foreach(var property in properties)
        {
			var propertyType = property.PropertyType.Name;
			var propertyName = property.Name;
#>

		public <#= propertyType #>Wrapper <#= propertyName#> { get;  private set; }
<#+
        }
    }
#>
<#+
	private void GenerateCollectionProperties(IEnumerable<PropertyInfo> properties)
    {
		foreach(var property in properties)
        {
			var propertyType = property.PropertyType.GenericTypeArguments.First().Name;
			var propertyName = property.Name;
#>

		public ChangeTrackingCollection<<#= propertyType #>Wrapper> <#= propertyName#> { get; set; }
<#+
        }
    }
#>
<#+
	private void GenerateInitializeComplexProperties(string modelTypeName, IEnumerable<PropertyInfo> properties)
	{
		if(properties.Any())
		{
#>

		protected override void InitializeComplexProperties(<#= modelTypeName #> model)
		{
<#+
			foreach(var property in properties)
			{
				var propertyName = property.Name;
				var propertyType = property.PropertyType.Name;
#>
			if(model.<#= propertyName #> == null)
			{
				throw new ArgumentException("<#= propertyName #> cannot be null.");
			}
			<#= propertyName #> = new <#= propertyType #>Wrapper(model.<#= propertyName #>);
			RegisterComplex(<#= propertyName #>);
<#+
			}
		}
	}
#>
<#+
	private void GenerateInitializeCollectionProperties(List<string>excludedGenericClasses, string modelTypeName, IEnumerable<PropertyInfo> properties)
	{
		if(properties.Any())
		{

			var typeString = excludedGenericClasses.Contains(modelTypeName)? "T" : "Domain."+modelTypeName;
#>

		protected override void InitializeCollectionProperties(<#= typeString #> model)
		{
<#+
			foreach(var property in properties)
			{
				var propertyType = property.PropertyType.GenericTypeArguments.First().Name;
				var propertyName = property.Name;
#>
			if(model == null)
			{
				throw new ArgumentException("<#= typeString #> model instance cannot be null.");
			}

			base.InitializeCollectionProperties(model);

			if(model.<#= propertyName #> == null)
			{
				throw new ArgumentException("<#= propertyName #> cannot be null.");
			}
			<#= propertyName #> = new ChangeTrackingCollection<<#= propertyType #>Wrapper>(model.<#= propertyName #>.Select(e => new <#= propertyType #>Wrapper(e)));
<#+ if(propertyName.Equals("Attributes")){ #>
			AddAttributesMetadata();
<#+ }#>
			RegisterCollection(<#= propertyName #>, model.<#= propertyName #>);
<#+
			}
		#>
		}
<#+
	  }
	}
#>
<#+
	private string GetTypeName(Type type)
	{
		if(type.IsGenericType)
        {
			var genericArguments = type.GetGenericArguments().Select(t => GetTypeName(t)).ToArray();
			var typeDefinition = type.GetGenericTypeDefinition().FullName;
			typeDefinition = typeDefinition.Substring(0, typeDefinition.IndexOf('`'));

			return string.Format("{0}<{1}>", typeDefinition, string.Join(",", genericArguments));
        }
		else
		{
			return type.FullName;
        }
    }
#>