<Window x:Class="SemanticRelationsResolver.Annotator.View.AddWordWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:SemanticRelationsResolver.Annotator.View"
        mc:Ignorable="d"
        Title="AddWordWindow" Height="300" Width="300" d:DataContext="{d:DesignData AddWordViewModel}">
    <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <Grid.Resources>
            <Style x:Key="DataGridCellStyle1" TargetType="{x:Type DataGridCell}">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type DataGridCell}">
                            <Grid Height="21.96">
                                <ComboBox x:Name="cbCondition1" ItemsSource="{Binding AllowedValuesSet}" SelectedValue="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" SelectedValuePath="Model" DisplayMemberPath="Model"/>
                                <TextBox x:Name="tbCondition2" Text="{Binding Value,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                                <TextBox x:Name="tbCondition3" Text="{Binding Value,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" IsReadOnly="True"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding IsEditable}" Value="True">
                                    <Setter Value="Hidden" TargetName="cbCondition1" Property="Visibility"/>
                                    <Setter Value="Visible" TargetName="tbCondition2" Property="Visibility"/>
                                    <Setter Value="Hidden" TargetName="tbCondition3" Property="Visibility"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsEditable}" Value="False">
                                    <Setter Value="Hidden" TargetName="cbCondition1" Property="Visibility"/>
                                    <Setter Value="Hidden" TargetName="tbCondition2" Property="Visibility"/>
                                    <Setter Value="Visible" TargetName="tbCondition3" Property="Visibility"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding HasAllowedValuesSet}" Value="True">
                                    <Setter Value="Visible" TargetName="cbCondition1" Property="Visibility"/>
                                    <Setter Value="Hidden" TargetName="tbCondition2" Property="Visibility"/>
                                    <Setter Value="Hidden" TargetName="tbCondition3" Property="Visibility"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                    </Trigger>
                    <Trigger Property="IsKeyboardFocusWithin" Value="True">
                        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Grid.Resources>

        <DataGrid ItemsSource="{Binding Word.Attributes}" Margin="0 5 0 0"
                  AutoGenerateColumns="False" Grid.Row="0" Grid.ColumnSpan="2">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Name"
                                    Binding="{Binding DisplayName,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"
                                    Width="Auto" />
                <DataGridTemplateColumn CellStyle="{StaticResource DataGridCellStyle1}" Header="Value" Width="*"/>
            </DataGrid.Columns>
        </DataGrid>
        <Button Name="OKButton" Content="Ok" Click="OKButton_Click" IsDefault="True" Command="{Binding OkButtonCommand}" Grid.Row="1" Grid.Column="0"/>
        <Button Name="CancelButton" Content="Cancel" IsCancel="True" Grid.Row="1" Grid.Column="1"/>
    </Grid>
</Window>
